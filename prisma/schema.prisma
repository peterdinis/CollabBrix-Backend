generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User table to manage app users
model User {
  id          Int         @id @default(autoincrement())
  username    String      @unique
  email       String      @unique
  password    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  teams       Team[]      @relation("UserTeams")
  workspaces  Workspace[] @relation("UserWorkspaces")  // Reverse relation to UserWorkspace
  notes       Note[]      // Added relationship to Notes
  documents   Document[]  @relation("DocumentCollaborators")
}

// Team table to manage teams
model Team {
  id          Int         @id @default(autoincrement())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       User[]      @relation("UserTeams")
}

// Workspace table to manage workspaces
model Workspace {
  id          Int         @id @default(autoincrement())
  name        String
  isPublic    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ownerId     Int
  owner       User        @relation("OwnedWorkspaces", fields: [ownerId], references: [id]) // Specify the relation name here
  documents   Document[]  // Each workspace can have many documents
  users       User[]      @relation("UserWorkspaces")  // Reverse relation to UserWorkspace
}

// Document table to store document details
model Document {
  id          Int         @id @default(autoincrement())
  title       String
  content     String
  isPublic    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspaceId Int
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  collaborators User[]     @relation("DocumentCollaborators")
}

// Note table to store user notes
model Note {
  id        Int      @id @default(autoincrement())
  title     String   // Title of the note
  content   String   // Content of the note
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id]) // Relation to User
}

// User-Workspace many-to-many relation
model UserWorkspace {
  userId      Int
  workspaceId Int
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@id([userId, workspaceId])
}

// Many-to-many relation between documents and users for collaboration
model DocumentCollaborators {
  documentId  Int
  userId      Int
  document    Document @relation(fields: [documentId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@id([documentId, userId])
}
